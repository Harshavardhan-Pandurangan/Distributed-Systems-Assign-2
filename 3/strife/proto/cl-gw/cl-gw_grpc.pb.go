// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/cl-gw.proto

package cl_gw

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentGatewayService_RegisterClient_FullMethodName         = "/cl_gw.PaymentGatewayService/RegisterClient"
	PaymentGatewayService_UpdateClientDetails_FullMethodName    = "/cl_gw.PaymentGatewayService/UpdateClientDetails"
	PaymentGatewayService_ViewBalance_FullMethodName            = "/cl_gw.PaymentGatewayService/ViewBalance"
	PaymentGatewayService_InitiateTransaction_FullMethodName    = "/cl_gw.PaymentGatewayService/InitiateTransaction"
	PaymentGatewayService_ViewTransactionHistory_FullMethodName = "/cl_gw.PaymentGatewayService/ViewTransactionHistory"
)

// PaymentGatewayServiceClient is the client API for PaymentGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentGatewayServiceClient interface {
	// Register a new Client
	RegisterClient(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Update Client Details
	UpdateClientDetails(ctx context.Context, in *UpdateDetails, opts ...grpc.CallOption) (*UpdateResponse, error)
	// Func to view bank account balance
	ViewBalance(ctx context.Context, in *ViewBalanceRequest, opts ...grpc.CallOption) (*ViewBalanceResponse, error)
	// Initiate transaction
	InitiateTransaction(ctx context.Context, in *InitiateTransactionRequest, opts ...grpc.CallOption) (*InitiateTransactionResponse, error)
	// Func to view transaction history
	ViewTransactionHistory(ctx context.Context, in *ViewTransactionHistoryRequest, opts ...grpc.CallOption) (*ViewTransactionHistoryResponse, error)
}

type paymentGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentGatewayServiceClient(cc grpc.ClientConnInterface) PaymentGatewayServiceClient {
	return &paymentGatewayServiceClient{cc}
}

func (c *paymentGatewayServiceClient) RegisterClient(ctx context.Context, in *ClientDetails, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_RegisterClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) UpdateClientDetails(ctx context.Context, in *UpdateDetails, opts ...grpc.CallOption) (*UpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_UpdateClientDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) ViewBalance(ctx context.Context, in *ViewBalanceRequest, opts ...grpc.CallOption) (*ViewBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewBalanceResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_ViewBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) InitiateTransaction(ctx context.Context, in *InitiateTransactionRequest, opts ...grpc.CallOption) (*InitiateTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateTransactionResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_InitiateTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentGatewayServiceClient) ViewTransactionHistory(ctx context.Context, in *ViewTransactionHistoryRequest, opts ...grpc.CallOption) (*ViewTransactionHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewTransactionHistoryResponse)
	err := c.cc.Invoke(ctx, PaymentGatewayService_ViewTransactionHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentGatewayServiceServer is the server API for PaymentGatewayService service.
// All implementations must embed UnimplementedPaymentGatewayServiceServer
// for forward compatibility.
type PaymentGatewayServiceServer interface {
	// Register a new Client
	RegisterClient(context.Context, *ClientDetails) (*RegisterResponse, error)
	// Update Client Details
	UpdateClientDetails(context.Context, *UpdateDetails) (*UpdateResponse, error)
	// Func to view bank account balance
	ViewBalance(context.Context, *ViewBalanceRequest) (*ViewBalanceResponse, error)
	// Initiate transaction
	InitiateTransaction(context.Context, *InitiateTransactionRequest) (*InitiateTransactionResponse, error)
	// Func to view transaction history
	ViewTransactionHistory(context.Context, *ViewTransactionHistoryRequest) (*ViewTransactionHistoryResponse, error)
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

// UnimplementedPaymentGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentGatewayServiceServer struct{}

func (UnimplementedPaymentGatewayServiceServer) RegisterClient(context.Context, *ClientDetails) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterClient not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) UpdateClientDetails(context.Context, *UpdateDetails) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClientDetails not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) ViewBalance(context.Context, *ViewBalanceRequest) (*ViewBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBalance not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) InitiateTransaction(context.Context, *InitiateTransactionRequest) (*InitiateTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateTransaction not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) ViewTransactionHistory(context.Context, *ViewTransactionHistoryRequest) (*ViewTransactionHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewTransactionHistory not implemented")
}
func (UnimplementedPaymentGatewayServiceServer) mustEmbedUnimplementedPaymentGatewayServiceServer() {}
func (UnimplementedPaymentGatewayServiceServer) testEmbeddedByValue()                               {}

// UnsafePaymentGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentGatewayServiceServer will
// result in compilation errors.
type UnsafePaymentGatewayServiceServer interface {
	mustEmbedUnimplementedPaymentGatewayServiceServer()
}

func RegisterPaymentGatewayServiceServer(s grpc.ServiceRegistrar, srv PaymentGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentGatewayService_ServiceDesc, srv)
}

func _PaymentGatewayService_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_RegisterClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).RegisterClient(ctx, req.(*ClientDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_UpdateClientDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).UpdateClientDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_UpdateClientDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).UpdateClientDetails(ctx, req.(*UpdateDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_ViewBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).ViewBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_ViewBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).ViewBalance(ctx, req.(*ViewBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_InitiateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).InitiateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_InitiateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).InitiateTransaction(ctx, req.(*InitiateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentGatewayService_ViewTransactionHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewTransactionHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentGatewayServiceServer).ViewTransactionHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentGatewayService_ViewTransactionHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentGatewayServiceServer).ViewTransactionHistory(ctx, req.(*ViewTransactionHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentGatewayService_ServiceDesc is the grpc.ServiceDesc for PaymentGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cl_gw.PaymentGatewayService",
	HandlerType: (*PaymentGatewayServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _PaymentGatewayService_RegisterClient_Handler,
		},
		{
			MethodName: "UpdateClientDetails",
			Handler:    _PaymentGatewayService_UpdateClientDetails_Handler,
		},
		{
			MethodName: "ViewBalance",
			Handler:    _PaymentGatewayService_ViewBalance_Handler,
		},
		{
			MethodName: "InitiateTransaction",
			Handler:    _PaymentGatewayService_InitiateTransaction_Handler,
		},
		{
			MethodName: "ViewTransactionHistory",
			Handler:    _PaymentGatewayService_ViewTransactionHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cl-gw.proto",
}
